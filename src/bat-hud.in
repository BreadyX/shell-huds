#! /usr/bin/env python3
"""Format a quick summary about the cnarge of the battery, if available"""

import sys
import os
import argparse

NAME = "bat-hud"
VERSION = "@version@"
DESCRIPTION = ("Format a quick summary about the cnarge of the battery, "
               "if available.")
EPILOG = ("If the environment variable BAT_HUD_GLYPH is set, the script "
          "will use unicode glyphs. The variable is, however, ignored if a "
          "tty is used.")
VERSION_DIALOG = ("{} version {}\n"
                  "Written by BreadyX, contacts:\n"
                  "\tGitHub repo:  @repo_url@")
VERSION_HELP = "show info about version"

if ('BAT_HUD_GLYPH' in os.environ) and (not os.environ['TERM'] == 'linux'):
    BATTERY_FULL_GLYPH = ''
    BATTERY_34_GLYPH = ''
    BATTERY_HALF_GLYPH = ''
    BATTERY_14_GLYPH = ''
    BATTERY_LOW_GLYPH = ''
    BATTERY_CHARGING_GLYPH = ''
else:
    BATTERY_FULL_GLYPH = BATTERY_34_GLYPH = BATTERY_HALF_GLYPH = \
        BATTERY_14_GLYPH = BATTERY_LOW_GLYPH = 'BAT: '
    BATTERY_CHARGING_GLYPH = 'AC: '

def main():
    """Main func"""
    args = setup_args()
    i = 0
    prefix = '/sys/class/BAT{i}/'

    if args.version is True:
        print(VERSION_DIALOG.format(NAME, VERSION))
        sys.exit()

    while os.path.isdir(prefix):
        if i != 0:
            print(';')
        bat_percent = get_capacity(prefix)
        status = get_status(prefix)
        if status == 'Charging':
            print(f'{BATTERY_CHARGING_GLYPH} {bat_percent}%')
        elif status == 'NA':
            print(f'? {bat_percent}%')
        else:
            if bat_percent >= 75:
                print(f'{BATTERY_FULL_GLYPH} {bat_percent}%')
            elif bat_percent >= 50:
                print(f'{BATTERY_34_GLYPH} {bat_percent}%')
            elif bat_percent >= 15:
                print(f'{BATTERY_HALF_GLYPH} {bat_percent}%')
            elif bat_percent >= 3:
                print(f'{BATTERY_14_GLYPH} {bat_percent}%')
            else:
                print(f'{BATTERY_LOW_GLYPH} {bat_percent}%')
        i += 1
        prefix = '/sys/class/BAT{i}/'

    if i == 0:
        sys.exit(1)

def setup_args():
    """Return namespace with parsed args"""
    parser = argparse.ArgumentParser(prog=NAME, description=DESCRIPTION,
                                     epilog=EPILOG)
    parser.add_argument('-v', '--version', action='store_true',
                        help=VERSION_HELP)
    return parser.parse_args()

def get_capacity(prefix):
    """Get capacity from sysfs"""
    try:
        with open(os.path.join(prefix, 'capacity')) as file:
            return int(file.read().strip())
    except FileNotFoundError:
        return 0

def get_status(prefix):
    """Get status from sysfs"""
    try:
        with open(os.path.join(prefix, 'status')) as file:
            return file.read().strip()
    except FileNotFoundError:
        return "NA"

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
